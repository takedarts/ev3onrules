//
// Generated by build script (rule.pl)
//
#include "{$RULE_NAME}.h"
#include "../Include.h"

using namespace etrobo;

/**
 * このクラスのルール番号。
 */
const int32_t {$RULE_NAME}::NUMBER = {$RULE_NUMBER};

/**
 * このクラスのルールオブジェクトを取得する。
 * ルール管理オブジェクトに登録されているルールオブジェクトを探す。
 * @param ruleManager ルール管理オブジェクト
 * @return ルールオブジェクト
 */
{$RULE_NAME}* {$RULE_NAME}::getRule(RuleManager *ruleManager)
{
  return ({$RULE_NAME}*) ruleManager->getRule({$RULE_NAME}::NUMBER);
}

/**
 * 初期化処理を実行する。
 */
{$RULE_NAME}::{$RULE_NAME}()
    : Rule({$RULE_NAME}::NUMBER)
{
}

/**
 * 終了処理を実行する。
 */
{$RULE_NAME}::~{$RULE_NAME}()
{
}

/**
 * 開始処理を実行する。
 * 実行ルールが変更されたとき、runが実行されるまでに1回だけ実行される。
 * @param filterManager フィルタ管理オブジェクト
 * @param deviceManager デバイス管理オブジェクト
 */
void {$RULE_NAME}::init(FilterManager* filterManager, DeviceManager* deviceManager)
{
}

/**
 * 制御処理を実行する。
 * @param filterManager フィルタ管理オブジェクト
 * @param deviceManager デバイス管理オブジェクト
 */
void {$RULE_NAME}::run(FilterManager* filterManager, DeviceManager* deviceManager)
{
}

/**
 * このルールが実行可能状態であるかを確認する。
 * このルールを実行すべき状態の場合は自分のルール番号を返す。
 * 他のルールを実行すべき状態の場合はそのルールの番号を返す。
 * 実行すべきルールが存在しない場合(制御終了の場合)は-1を返す。
 * @param filterManager フィルタ管理オブジェクト
 * @param deviceManager デバイス管理オブジェクト
 * @return 次に実行するルール番号
 */
int32_t {$RULE_NAME}::next(FilterManager* filterManager, DeviceManager* deviceManager)
{
  return {$RULE_NAME}::NUMBER;
}
