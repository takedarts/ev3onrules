//
// Generated by build script (rule.pl)
//
#ifndef RULE_{$RULE_NAME}_H_
#define RULE_{$RULE_NAME}_H_

#include "../Rule.h"
#include "../RuleManager.h"

/**
 * 自動生成されたルールクラス。
 * ルール番号: {$RULE_NUMBER}
 */
class {$RULE_NAME}: public etrobo::Rule
{
public:
  /**
   * このクラスのルール番号。
   */
  static const int32_t NUMBER;

  /**
   * このクラスのルールオブジェクトを取得する。
   * ルール管理オブジェクトに登録されているルールオブジェクトを探す。
   * @param ruleManager ルール管理オブジェクト
   * @return ルールオブジェクト
   */
  static {$RULE_NAME}* getRule(etrobo::RuleManager* ruleManager);

public:
  /**
   * 初期化処理を実行する。
   */
  {$RULE_NAME}();

  /**
   * 終了処理を実行する。
   */
  virtual ~{$RULE_NAME}();

  /**
   * 開始処理を実行する。
   * 実行ルールが変更されたとき、runが実行されるまでに1回だけ実行される。
   * @param filterManager フィルタ管理オブジェクト
   * @param deviceManager デバイス管理オブジェクト
   */
  virtual void init(etrobo::FilterManager* filterManager, etrobo::DeviceManager* deviceManager) override;

  /**
   * 制御処理を実行する。
   * @param filterManager フィルタ管理オブジェクト
   * @param deviceManager デバイス管理オブジェクト
   */
  virtual void run(etrobo::FilterManager* filterManager, etrobo::DeviceManager* deviceManager) override;

  /**
   * このルールが実行可能状態であるかを確認する。
   * このルールを実行すべき状態の場合は自分のルール番号を返す。
   * 他のルールを実行すべき状態の場合はそのルールの番号を返す。
   * 実行すべきルールが存在しない場合(制御終了の場合)は-1を返す。
   * @param filterManager フィルタ管理オブジェクト
   * @param deviceManager デバイス管理オブジェクト
   * @return 次に実行するルール番号
   */
  virtual int32_t next(etrobo::FilterManager* filterManager, etrobo::DeviceManager* deviceManager) override;
};

#endif /* RULE_{$RULE_NAME}_H_ */
